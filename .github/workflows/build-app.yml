name: Build Workflow

# Trigger the workflow on push events to the main branch
on:
    push:
      branches:
        - main

jobs:

#-------------------------------------------------------------------------------

  backend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Build Backend
        run: |
          cd Basic3TierAPI
          dotnet build --configuration Release
        working-directory: ./api

      - name: Publish Backend
        run: |
            dotnet publish ./Basic3TierAPI/Basic3TierAPI.csproj --configuration Release --output ./publish /p:UseAppHost=false
        working-directory: ./api


#-------------------------------------------------------------------------------

  sonarcloud-analysis:
    runs-on: ubuntu-latest
    needs: backend-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          projectBaseDir: './api' 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} 

      - name: Run Unit Tests
        run: |
          dotnet test --logger:trx --results-directory test-results

      - name: Publish Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/

#-------------------------------------------------------------------------------

###                           need to fix the Dockerfile
#   dockerize_push_backend:
#     runs-on: ubuntu-latest
#     steps:
#       - name: checkout app
#         uses: actions/checkout@v4
        
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1
      
#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2        
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
      
#       - name: Build and Push Backend Image for multiple platforms
#         run: |
#           docker buildx build --platform linux/amd64,linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/3-tier-app:api --push .
#         working-directory: ./api

#-------------------------------------------------------------------------------

  deploy-to-eks:
    runs-on: ubuntu-latest
    #needs: dockerize_push_backend
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name 3-tier-app --region ${{ secrets.AWS_REGION }}

      - name: Deploy StorageClass
        run: kubectl apply -f ./k8s/storage-class.yml

      - name: Deploy DB
        run: kubectl apply -f ./k8s/db-deployment.yml

      - name: Check Status
        run: kubectl rollout status deployment/database

      - name: Deploy Backend
        run: kubectl apply -f ./k8s/api-deployment.yml
        
      - name: Check Status
        run: kubectl rollout status deployment/backend-deployment

      - name: Extract the BE Service External IP
        run: echo "BACKEND_URL=$(kubectl get services | grep backend-service | awk '{print $4}')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2        
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Output ENV Var incase
        run: echo ${{ env.BACKEND_URL }}

      - name: Overwrite config.json
        run: |
            cat <<EOT > ui/config/config.json
            { 
                "API_URL": "http://${{ env.BACKEND_URL }}:80/"
            }
            EOT

      - name: Cat config.json
        run: cat ui/config/config.json

      - name: Test build with props 
        uses: docker/build-push-action@v2
        with:
          context: ./ui
          platforms: |
            linux/amd64
            linux/arm64
          tags: ${{ secrets.DOCKER_USERNAME }}/3-tier-app:ui-last
          push: true

      - name: Deploy Frontend
        run: kubectl apply -f ./k8s/ui-deployment.yml
      
      - name: Check Status
        run: kubectl rollout status deployment/frontend-deployment


